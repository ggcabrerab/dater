{"name":"Dater","tagline":"Convert literal periods of time in a formatted future date","body":"Convert a period of time expressed in a literal way like 'in 2 days' to a formatted future date with a given format. It aims to be helpful in regression tests when you have to deal with dinamic dates.\r\n\r\nYou can also, convert dates from 'dd/mm/yyyy' to 'yyyy-mm-dd' or viceversa.\r\n\r\nIf you want to pass a formatted date like dd/mm/yyyy to convert to yyyy-mm-dd, you have to take care about only two things with the argument:\r\n\r\n1. Year number must have four digits.\r\n\r\n2. Month number must be always in the middle.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'dater'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install dater\r\n\r\n## Usage\r\n\r\n    require 'dater'\r\n\r\n    date=Dater::Resolver.new('%Y-%m-%d')\r\n\r\n    date.for(\"in 4 days\") # => yyyy-mm-dd (date for 4 days from the date of today)\r\n    date.for(\"in 2 weeks\") # => yyyy-mm-dd (date for 2 weeks from the date of today)\r\n    date.for(\"in 10 months\") # => yyyy-mm-dd (date for 10 months from the date of today)\r\n    date.for(\"in 1 year\") # => yyyy-mm-dd (date for 1 year from the date of today)\r\n    date.for(\"today\") # => yyyy-mm-dd (date of today)\r\n    date.for(\"tomorrow\") # => yyyy-mm-dd (date of tomorrow)\r\n    date.for(\"yesterday\") # => yyyy-mm-dd (date of yesterday)\r\n\r\n    date.yesterday\r\n    date.today\r\n    date.tomorrow\r\n\r\n\r\nIf the argument is nil, it will return nil. But you can initialize Dater object with 'today_for_nil' flag like:\r\n\r\n    date = Dater::Resolver.new(\"%Y-%m-%d\", true)\r\n\r\n    date.for #=> yyyy-mm-dd (date of today)\r\n\r\nYou'll find format directives at following link:\r\n\r\nhttp://apidock.com/ruby/Time/strftime\r\n\r\nIt does not work correctly with leap-years and calculates months of 30 days only.\r\n\r\n\r\n***\r\n\r\n\r\nSi deseas usar esta gema en español puedes inicializar la clase de la siguiente manera:\r\n\r\n    fecha=Dater::Resolver.new('%Y-%m-%d', false, \"es\")\r\n    fecha.para(\"en 1 semana\")\r\n    fecha.ayer\r\n    fecha.hoy\r\n    fecha.mañana\r\n\r\n\r\nCon eso puedes pasar argumentos en idioma español (por ejemplo 'en 2 días', 'en 10 meses', 'en 1 año')\r\n\r\n\r\n***\r\n\r\nSe você quiser usar esta gem em Português, você pode inicializar a classe da seguinte forma:\r\n\r\n    data=Dater::Resolver.new('%Y-%m-%d', false, \"pt\")\r\n    data.para(\"em 2 dias\")\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}